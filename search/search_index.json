{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-quicksave","title":"Welcome to QuickSave","text":"<p>QuickSave is a fast, memory-efficient, and lightweight key-value database designed for use in small applications.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install QuickSave using pip:</p> <pre><code>pip install --upgrade qsave\n</code></pre> <p>Optionally, install <code>msgspec</code> to boost performance:</p> <pre><code>pip install msgspec==0.19.0\n</code></pre>"},{"location":"#why-quicksave","title":"Why QuickSave?","text":"<p>QuickSave stands out for its speed, memory efficiency, and simplicity. Here are some of the key reasons you should consider using it:</p> <ul> <li>\ud83d\ude80 High Performance: QuickSave is designed to be fast, with minimal overhead.</li> <li>\ud83d\udca1 Low Memory Usage: The library is optimized for memory efficiency, making it a great choice for projects with limited resources.</li> <li>\ud83e\uddf5 Thread-Safe: It supports thread-safe operations, ensuring that it works reliably in concurrent environments.</li> <li>\ud83c\udfce\ufe0f Boosted Performance with <code>msgspec</code>: By installing the optional <code>msgspec</code> library, you can further enhance QuickSave's performance, especially when handling complex data types.</li> <li>\ud83d\udd27 No Dependencies: QuickSave is a pure Python library, which means it has no external dependencies, making it easy to install and use in any Python project.</li> </ul>"},{"location":"Getting%20Started/","title":"Getting Started","text":""},{"location":"Getting%20Started/#examples","title":"Examples","text":"<p>To start using QuickSave, import it and initialize your database:</p> <pre><code>from qsave import QuickSave\n\ndb = QuickSave(path=\"path/to/your/file.json\", pretty=True)\n</code></pre> <p>The pretty argument beautifies the saved data for better readability (optional).</p>"},{"location":"Getting%20Started/#basic-usage","title":"Basic Usage","text":"<p>By default, changes are automatically saved when the <code>with</code> block ends:</p> <pre><code>with db.session() as session:\n    session[\"key\"] = \"value\"\n    print(session.get(\"key\"))  # Output: None, not yet saved\n\n# Exiting the block automatically commits changes\nwith db.session() as session:\n    print(session.get(\"key\"))  # Output: value\n</code></pre>"},{"location":"Getting%20Started/#manual-commit-commit_on_expirefalse","title":"Manual Commit (commit_on_expire=False)","text":"<p>For full control over when changes are saved, use commit_on_expire=False:</p> <pre><code>with db.session(commit_on_expire=False) as session:\n    session[\"key\"] = \"manual_value\"\n    print(session.get(\"key\"))  # Output: None, not yet saved\n    session.commit()  # Now changes are saved\n    print(session.get(\"key\"))  # Output: manual_value\n\nwith db.session() as session:\n    print(session.get(\"key\"))  # Output: manual_value\n</code></pre>"},{"location":"Getting%20Started/#commit-and-rollback","title":"Commit and Rollback","text":"<p>You can manually save or discard changes during a session:</p> <pre><code>with db.session() as session:\n    session[\"key\"] = \"temp_value\"\n    session.rollback()  # Discard changes\n    print(session.get(\"key\"))  # Output: None\n</code></pre>"},{"location":"Getting%20Started/#nested-data","title":"Nested Data","text":"<pre><code>with db.session() as session:\n    session[\"nested\"] = {\"key\": [1, 2, 3]}\n    session.commit()\n\nwith db.session() as session:\n    print(session[\"nested\"])  # Output: {\"key\": [1, 2, 3]}\n</code></pre>"}]}